1. SocketCAN
-------------
Linux SocketCAN Documentation:
https://www.kernel.org/doc/Documentation/networking/can.txt

   1.1 Changing baud rate
   
   All CAN Interfaces are brought up automatically at boot using udev
   and systemd. They have a preset bitrate of 250000.
   CAN configuration defaults are stored in /etc/default/socketcan.
   To apply changes without a reboot simply restart the systemd service(s):
      $ systemctl restart socketcan@can0
      $ systemctl restart socketcan@can1
   
   To temporarily change the baudrate use the ip tool:
   - stop the running device
      $ ip link set can0 down
   - set new device options
      $ ip link set can0 type can bitrate 500000
   - start the device
      $ ip link set can0 up

   1.2 Kernel support
   
   The Kernel is compiled to support:
   * Raw CAN Protocol
   * Broadcast Manger CAN Protocol
   * CAN Gateway/Router
   * Virtual Local CAN Interface (vcan)

   The used Linux and SocketCAN version can handle CAN FD frames, but
   the current shield hardware does NOT SUPPORT CAN FD.
   
   1.3 How to receive / send CAN data
   
   The python2/3 library python-can is preinstalled to send/receive CAN data
   with Python. Also many can-tools are installed, like cansend or candump.


2. GPSD
--------
GPSD Homepage:
http://www.catb.org/gpsd/index.html

   2.1 Current setup

   GPSD is listening on /dev/ttyS1 at 9600 Baud. By default, GPSD tries
   to (re)configure the GPS device on its own. Defaults can be changed
   in /etc/default/gpsd.default. GPSD is started by systemd on boot.
   To restart/start/stop GPSD use:
      $ systemctl restart/start/stop gpsd

   2.2 How to get GPSD data
   
   GPSD opens a socket on port 2947. Data is received in JSON format.
   Example how to get basic data:
   - connect to GPSD
      $ nc localhost 2947
      {"class":"VERSION","release":"3.14","rev":"3.14","proto_major":3
      ,"proto_minor":10}
   - tell GPSD to listen for messages
      ?WATCH={"enable":true}
      {"class":"WATCH","enable":true,"json":false,"nmea":false,"raw":0
      ,"scaled":false,"timing":false,"split24":false,"pps":false}
   - poll GPS data
      ?POLL;
      {"class":"POLL","time":"2017-08-29T13:27:13.132Z","active":1,
      "tpv":[{"class":"TPV","device":"/dev/ttyS1","mode":3,
      "lat":47.660268500,"lon":9.491841167,"alt":422.400}],...
    
    The Python2/3 library gps3 is preinstalled to get GPSD data in Python.


3. NEO-M8P-2
-------------
The used ublox GPS receiver. Connected via serial port. Documentation:
https://www.u-blox.com/en/product/neo-m8p-series

Normally you would not want to configure the receiver manually, but it is
necessary for some use-cases. If you change the configuration make sure
to enable the GPSD "read only" mode with the "-b" switch. (See 2.1)

   3.1 Message setup
   
   To receive position information only the NMEA GGA message is required.
   Other messages can be enabled or disabled as well. See
   http://www.gpsinformation.org/dale/nmea.htm#GGA
   for all NMEA message types. Be aware that GPSD is not able to parse
   and convert all of the available messages!
   
   There are no proper linux tools to configure wich messages the M8P
   should send out, so ublox u-center is needed (windows software).
   To connect the M8P with u-center do the following:
   - stop gpsd
      $ systemctl stop gpsd
   - create a tunnel with socat
      $ socat tcp-l:7777,fork /dev/ttyS1
   
   Now you can connect to the M8P in u-center by creating a new network
   conenction (toolbar on top, bottom left). It should look like
   tcp://192.168.1.1:7777.
   In View -> Configuration View -> MSG it is now possible to specify wich
   messages should be sent out. Only UART1 is connected to the board. After
   every step you need to press "send" on the bottom left to save changes.
   The settings are changed in RAM, if they shall survive a power down of
   the M8P you can write them into flash / eerpom.
   To do so go into Configuration View -> CFG, Select all Devices (BBR,
   I2C-EERPOM, ...) and "Save current configuration". Then, again, klick
   "send" on the bottom left.
   
   3.2 Saving and restoring full configurations
   
   It is possible to save/restore a full configuration with a
   configuration file. To do so go into Tools -> GNSS Configuration.
   
   3.3 RTK Mode
   
   The M8P supports Real Time Kinematics with cm-level precision. To
   enable RTK mode the M8P needs to receive a continous stream of RTCM3
   Messages from a base station with fixed location. If a RTCM3 message
   is received, the M8P automatically switches into RTK mode.
   
   Example rover configuration:
   - Set a proper tty configuration
      $ stty -F /dev/ttyS1 9600 raw -echo
   - Enable the NMEA GGA messages for the rover as shown in 3.1
   - Create a tunnel for piping RTCM3 messages to the M8P
      $ socat -u tcp-l:8888,fork /dev/ttyS1
   
   Example base station configuration:
   - Set a proper tty configuration
      $ stty -F /dev/ttyS1 9600 raw -echo
   - Enable the following RTCM3 messages for the base:
      * RTCM3 1005 # Stationary RTK Reference Station antenna reference point
      * RTCM3 1077 # GPS MSM7
      * RTCM3 1087 # GLONASS MSM7
      * RTCM3 1230 # GLONASS L1 and L2 Code-Phase Biases
   - Pipe the data to the rover
      $ cat /dev/ttyS1 | nc 192.168.xxx.xxx 8888
   
   It is suggested to output RTCM3 messages at a rate of 1Hz. The rover only
   waits for up to 700ms between observation and reception of a RTCM3 message
   before falling back to an extrapolated solution. After 3 seconds the M8P
   will fall back into standard GNSS operation mode. In RTK fixed mode
   accuracy is expected to be correct to the cm-level.
   
